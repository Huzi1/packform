{"version":3,"sources":["componenets/TableView.js","componenets/View.js","componenets/Landing.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["TableView","SearchBar","Search","ClearSearchButton","useState","setMinDate","setMaxDate","startDate","setStartDate","endDate","setEndDate","focusedInput","setFocusedInput","userData","setUserData","rowTotal","setRowTotal","rowSum","setRowSum","permData","setPermData","tableRef","useRef","columns","text","dataField","searchable","formatter","cell","moment","format","sort","sortCaret","order","column","color","useEffect","tempArr","forEach","obj","tempDate","created","start","end","isAfter","isBefore","console","log","push","length","alert","axios","get","url","then","response","tempUserData","rowSumTemp","data","map","item","Math","random","parseFloat","total","replace","a","b","Date","catch","error","afterSearch","searchData","refreshTable","handleDatesChange","pagination","paginationFactory","custom","sizePerPage","paginationProps","paginationTableProps","keyField","striped","hover","condensed","search","props","Row","style","Col","md","span","offset","searchProps","className","startDateId","endDateId","onDatesChange","onFocusChange","displayFormat","isOutsideRange","Button","onClick","variant","size","active","class","aria-hidden","data-testid","baseProps","filter","filterFactory","noDataIndication","ref","defaultSorted","View","Container","Landing","id","href","Routes","path","component","exact","App","heigt","Boolean","window","location","hostname","match","MyApp","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.e9a061bf.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\"\nimport BootstrapTable from 'react-bootstrap-table-next';\nimport paginationFactory, { PaginationProvider, PaginationListStandalone } from 'react-bootstrap-table2-paginator';\nimport ToolkitProvider, { Search } from 'react-bootstrap-table2-toolkit';\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\nimport filterFactory from 'react-bootstrap-table2-filter';\nimport { Row, Col, Button } from 'react-bootstrap';\nimport moment from 'moment';\nimport 'react-dates/initialize';\nimport \"react-dates/lib/css/_datepicker.css\";\nimport { DateRangePicker } from 'react-dates';\n\nconst TableView = () => {\n    const { SearchBar, ClearSearchButton } = Search;\n    const [minDate, setMinDate] = useState(null);\n    const [maxDate, setMaxDate] = useState(null);\n    const [startDate, setStartDate] = useState(null);\n    const [endDate, setEndDate] = useState(null);\n\n\n\n\n    const [focusedInput, setFocusedInput] = useState(null);\n    const [userData, setUserData] = useState([]);\n    const [rowTotal, setRowTotal] = useState(0);\n    const [rowSum, setRowSum] = useState(0);\n    const [permData, setPermData] = useState([]);\n    const tableRef = useRef();\n\n    const dateFormatter = (cell) => {\n        return (<span>{moment(cell).format('MMM Do, h:mm a')}</span>)\n    }\n\n    const columns = [{\n        text: 'Order Name',\n        dataField: 'order_name',\n    },\n    {\n        text: 'Product',\n        dataField: 'product',\n    },\n    {\n        text: 'Customer Company',\n        dataField: 'customer_company',\n        searchable: false\n    },\n    {\n        text: 'Customer',\n        dataField: 'customer',\n        searchable: false\n    },\n    {\n        text: 'Created',\n        dataField: 'created',\n        searchable: false,\n        formatter: dateFormatter,\n        sort: true,\n        sortCaret: (order, column) => {\n            if (!order) return (<span>&nbsp;&nbsp;Desc/Asc</span>);\n            else if (order === 'asc') return (<span>&nbsp;&nbsp;Desc/<font color=\"red\">Asc</font></span>);\n            else if (order === 'desc') return (<span>&nbsp;&nbsp;<font color=\"red\">Desc</font>/Asc</span>);\n            return null;\n        }\n    },\n    {\n        text: 'Delivered Amount',\n        dataField: 'deliveredAmount',\n        searchable: false\n    },\n    {\n        text: 'Total',\n        dataField: 'total',\n        searchable: false\n    }]\n\n\n\n    \n\n    useEffect(() => {\n        //console.log(dateRange)\n        if (startDate != null && endDate != null) {\n            var tempArr = []\n            let tempData = permData\n\n            tempData.forEach(function (obj) {\n                // console.log(moment(obj.created).isAfter(startDate))\n                let tempDate = moment(obj.created).format('YYYY MM DD')\n                // console.log(typeof (tempDate), tempDate)\n                let start = moment(startDate).format('YYYY MM DD')\n                //let start = moment(dateRange.startDate).format('YYYY MM DD')\n                // console.log(typeof (start), start)\n                let end = moment(endDate).format('YYYY MM DD')\n                //let end = moment(dateRange.endDate).format('YYYY MM DD')\n                // console.log(typeof (end), end)\n                // console.log(\"tempDate\", tempDate, \"start\", start, \"end\", end)\n                // console.log(moment(tempDate).isAfter(start))\n                if (moment(tempDate).isAfter(start) && moment(tempDate).isBefore(end)) {\n                    console.log(\"rowObj\", obj)\n                    tempArr.push(obj)\n                }\n\n            })\n\n            if (tempArr.length > 0) {\n                setUserData(tempArr)\n                // console.log(userData.length)\n                setRowTotal(tempArr.length);\n            } else {\n                alert(\"No Data in the given date range!\")\n                setEndDate(null);\n                setStartDate(null);\n            }\n\n\n        }\n    }, [startDate, endDate]);\n\n\n\n    const url = \"http://localhost:5000\"\n    useEffect(() => {\n        console.log(\"calling /get_order\")\n        axios\n            .get(url + \"/get_order\")\n            .then((response) => {\n                const tempUserData = []\n                let rowSumTemp = 0;\n                console.log(\"response\", response);\n                response.data.map((item) => {\n                    item['id'] = Math.random()\n                    tempUserData.push(item);\n                    rowSumTemp = parseFloat(rowSumTemp) + parseFloat(item.total.replace(\"$\", \"\"));\n                });\n                tempUserData.sort(function (a, b) {\n                    var c = new Date(a.created);\n                    var d = new Date(b.created);\n                    return c - d;\n                });\n                setMinDate(moment(tempUserData[0].created))\n                setMaxDate(moment(tempUserData[tempUserData.length - 1].created))\n                setPermData(tempUserData);\n                setUserData(tempUserData);\n                setRowTotal(tempUserData.length);\n                setRowSum(rowSumTemp);\n            })\n            .catch((error) => {\n\n            });\n    }, []);\n\n\n\n    const options = {\n        custom: true,\n        // totalSize: userData.length,\n        sizePerPage: 5,\n    };\n\n\n    const afterSearch = (searchData) => {\n        setRowTotal(searchData.length);\n        let rowSumTemp = 0;\n        searchData.map(item => {\n            rowSumTemp = parseFloat(rowSumTemp) + parseFloat(item.total.replace(\"$\", \"\"))\n        })\n        setRowSum(rowSumTemp);\n    };\n    const refreshTable = () => {\n\n        setUserData(permData)\n\n        setRowTotal(permData.length);\n    }\n\n    const handleDatesChange = ({ startDate, endDate }) => {\n        setStartDate(startDate);\n        setEndDate(endDate);\n    };\n    return (\n        <>\n            <div>\n                {userData.length > 0 &&\n                    <PaginationProvider\n                        pagination={paginationFactory(options)}>\n                        {\n                            ({\n                                paginationProps,\n                                paginationTableProps\n                            }) => (\n                                    <div>\n\n                                        <ToolkitProvider\n                                            keyField='id'\n                                            data={userData}\n                                            columns={columns}\n                                            pagination={paginationFactory()}\n                                            striped\n                                            hover\n                                            condensed\n                                            search={{ afterSearch }}\n                                        // ref={n => this.toolkit = n}\n\n\n                                        >\n                                            {\n                                                props => (\n                                                    <div>\n\n\n                                                        <Row style={{ \"padding\": \"30px\", \"justifyContent\": \"space-around\" }}>\n                                                            <Col md={{ span: -1, offset: 0 }}>\n                                                                <SearchBar style={{ \"width\": \"250%\", \"float\": \"left\" }} {...props.searchProps} />\n                                                            </Col>\n                                                            <Col md={{ span: 1, offset: 0 }}>\n                                                                <ClearSearchButton {...props.searchProps} className={\"clear\"} />\n                                                            </Col>\n\n                                                        </Row>\n                                                        <Row>\n                                                            <Col md={{ span: -1, offset: 0 }}>\n                                                                <DateRangePicker\n\n                                                                    endDate={endDate} // momentPropTypes.momentObj or null,\n                                                                    startDate={startDate} // momentPropTypes.momentObj or null,\n                                                                    startDateId=\"startDate\" // PropTypes.string.isRequired,\n                                                                    endDateId=\"endDate\" // PropTypes.string.isRequired,\n                                                                    onDatesChange={handleDatesChange}// PropTypes.func.isRequired,\n                                                                    focusedInput={focusedInput} // PropTypes.oneOf([START_DATE, END_DATE]) or null,\n                                                                    onFocusChange={focusedInput => setFocusedInput(focusedInput)} // PropTypes.func.isRequired,\n                                                                    displayFormat={'DD/MM/YYYY'}\n                                                                    isOutsideRange={() => false}\n                                                                />\n                                                            </Col>\n                                                            <Col md={{ span: 1, offset: 0 }}>\n                                                                <Button onClick={refreshTable} variant=\"secondary\" size=\"lg\" active>\n                                                                    <i class=\"fa fa-refresh\" aria-hidden=\"true\"></i>\n                                                                </Button>\n                                                            </Col>\n                                                        </Row>\n\n                                                        <br />\n\n                                                        <Row>\n                                                            <h3 data-testid=\"rowCount\"> Total:${rowSum}\n                                                            </h3>\n                                                        </Row>\n\n                                                        <BootstrapTable\n                                                            {...props.baseProps}\n                                                            {...paginationTableProps}\n                                                            filter={filterFactory()}\n                                                            noDataIndication=\"No data\"\n                                                            ref={tableRef}\n                                                            striped\n                                                            hover\n                                                            condensed\n                                                            defaultSorted\n\n\n                                                        />\n                                                    </div>\n                                                )\n                                            }\n                                        </ToolkitProvider>\n                                        <PaginationListStandalone\n                                            {...paginationProps} />\n                                    </div>\n                                )\n                        }\n                    </PaginationProvider>\n\n\n\n                }\n                Total rows: {rowTotal}\n            </div>\n        </>\n    )\n\n};\nexport default TableView;","import React from 'react';\n\nimport { Container } from 'react-bootstrap';\nimport TableView from './TableView';\n\n\n\nconst View = () => {\n    return (\n        <>\n            <Container>\n\n                <TableView />\n            </Container>\n\n        </>\n    )\n};\n\nexport default View;","import React from \"react\";\n\nimport { Row, Container, Button } from 'react-bootstrap'\n\nconst Landing = () => {\n\n    return (\n        <>\n            <Container>\n                <Row style={{ \"padding\": \"20%\" }} className=\"justify-content-md-center\">\n                    <Button id=\"landingbtn\" variant=\"primary\" size=\"lg\" href=\"/Orders\">Go To Orders</Button>\n                </Row>\n\n            </Container>\n\n\n        </>\n    );\n\n}\nexport default Landing;","import React from \"react\";\nimport View from \"./componenets/View\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Landing from \"./componenets/Landing\"\n\n\n\nconst Routes = () => {\n\n    return (\n        <>\n            <Switch>\n                <Route path={\"/\"} component={Landing} exact />\n                <Route path={\"/Orders\"} component={View} exact />\n            </Switch>\n\n\n        </>\n    );\n};\n\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\nimport 'react-bootstrap-table2-paginator/dist/react-bootstrap-table2-paginator.min.css';\nimport Routes from './Routes';\n\nconst App = () => {\n  return (\n    <div className=\"App\" style={{ heigt: \"100%\" }}>\n      <Routes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nconst MyApp = () => {\n\n  return (\n    <BrowserRouter>\n      <App />\n\n    </BrowserRouter>\n  )\n}\nexport default MyApp;\n\n\n\nReactDOM.render(<MyApp />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}